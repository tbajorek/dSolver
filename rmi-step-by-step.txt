# Step by step Java RMI/JNI example compilation and execution

# 1. Java server classes compilation
#
/usr/lib/jvm/java-8-oracle/bin/javac PMiface.java PMimpl.java PMdata.java

# 2. RMI stub class explicit generation (not needed for JDK > 1.4)
#
/usr/lib/jvm/java-8-oracle/bin/rmic PMimpl

# 3. JNI C header file generation
#
/usr/lib/jvm/java-8-oracle/bin/javah -jni PMimpl

# 4. Native code implementation - shared library generation
#
gcc -fPIC -c *.c -I/usr/lib/jvm/java-8-oracle/include -I/usr/lib/jvm/java-8-oracle/include/linux
ld -shared -o libPowerMeanWrapper.so *.o
rm -f *.o

# 5. Java client class compilation
#
/usr/lib/jvm/java-8-oracle/bin/javac client.java

# 6. Starting RMI registry in background and display TCP port status
#
echo "Start RMI registry (separate server-side name server) in other directory"
echo "and on default port 1099:"
( for dir in `pwd`; do cd /tmp ; /usr/lib/jvm/java-8-oracle/bin/rmiregistry 1099 -Djava.rmi.server.codebase=file://$dir/ ; done) &
netstat -antp | grep rmi

# 7. Starting server program in background and display TCP port status
#
#  (Optionally: provide non-default TCP port for RMI registry) 
# 
echo "Start server (with no limit security policy):"
( for dir in `pwd`; do export LD_LIBRARY_PATH=$dir ;  /usr/lib/jvm/java-8-oracle/bin/java -cp . -Djava.security.policy=$dir/java.policy -Djava.rmi.server.codebase=file://$dir/ PMimpl <optional_registry_port> ; done ) &
netstat -antp | grep java

# 8. Starting client program with 2 parameters: server hostname 
# 						value of power exponent
#    ( and optionally with registry TCP port:	port )
jobs
echo "Start client (with no limit security policy):"
/usr/lib/jvm/java-8-oracle/bin/java -Djava.security.policy=java.policy client <server_dns_name_or_ip> 2.0 <optional_registry_port>

# 9. Shutting down server and registry running in background
#
kill -HUP %2
kill -HUP %1
jobs
